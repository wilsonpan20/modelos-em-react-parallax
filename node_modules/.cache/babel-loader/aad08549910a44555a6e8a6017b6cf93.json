{"ast":null,"code":"var _jsxFileName = \"/home/wilson/projetosParticular/yt-react-parallax/src/hooks/useGlobalMouseMove.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext, useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GlobalMouseCoordsContext = /*#__PURE__*/React.createContext(undefined);\nexport const GlobalMouseMoveProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [mouseCoords, setMouseCoords] = useState([// x\n  0, // y\n  0]);\n  useEffect(() => {\n    let currentMouseX = 0;\n    let currentMouseY = 0;\n    let currentWinWidth = window.innerWidth || 0;\n    let currentWinHeight = window.innerHeight || 0;\n    let prevMouseX = currentMouseX;\n    let prevMouseY = currentMouseY;\n    let prevWinWidth = currentWinWidth;\n    let prevWinHeight = currentWinHeight;\n\n    const onTick = () => {\n      // prettier-ignore\n      if (prevMouseX !== currentMouseX || prevMouseY !== currentMouseY || prevWinWidth !== currentWinWidth || prevWinHeight !== currentWinHeight) {\n        setMouseCoords([// horizontal distance from center of screen\n        -(currentWinWidth * 0.5 - currentMouseX) / (currentWinWidth * 0.5), // vertical distance from center of screen\n        (currentWinHeight * 0.5 - currentMouseY) / (currentWinHeight * 0.5)]);\n      }\n\n      prevMouseX = currentMouseX;\n      prevMouseY = currentMouseY;\n      prevWinWidth = currentWinWidth;\n      prevWinHeight = currentWinHeight;\n      window.requestAnimationFrame(onTick);\n    };\n\n    onTick();\n\n    const onMouseMove = e => {\n      currentMouseX = e.clientX;\n      currentMouseY = e.clientY;\n    };\n\n    const onResize = e => {\n      currentWinHeight = window.innerHeight || 0;\n      currentWinWidth = window.innerWidth || 0;\n    };\n\n    window.addEventListener('mousemove', onMouseMove);\n    window.addEventListener('resize', onResize);\n    return () => {\n      window.removeEventListener('mousemove', onMouseMove);\n      window.removeEventListener('resize', onResize);\n    };\n  }, [setMouseCoords]);\n  return /*#__PURE__*/_jsxDEV(GlobalMouseCoordsContext.Provider, {\n    value: mouseCoords,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 10\n  }, this);\n};\n\n_s(GlobalMouseMoveProvider, \"0yDNRFzBE5FKF9S2g+Ja+vRq7nc=\");\n\n_c = GlobalMouseMoveProvider;\nexport const useGlobalMouseMove = () => {\n  _s2();\n\n  const mouseCoords = useContext(GlobalMouseCoordsContext);\n  if (mouseCoords === undefined) throw new Error('useGlobalMouseMove must be used inside a GlobalMouseMoveProvider');\n  return mouseCoords;\n};\n\n_s2(useGlobalMouseMove, \"ifWMGWUNbcXY8FTJ5jfgBefCCY0=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"GlobalMouseMoveProvider\");","map":{"version":3,"sources":["/home/wilson/projetosParticular/yt-react-parallax/src/hooks/useGlobalMouseMove.js"],"names":["React","useContext","useEffect","useState","GlobalMouseCoordsContext","createContext","undefined","GlobalMouseMoveProvider","children","mouseCoords","setMouseCoords","currentMouseX","currentMouseY","currentWinWidth","window","innerWidth","currentWinHeight","innerHeight","prevMouseX","prevMouseY","prevWinWidth","prevWinHeight","onTick","requestAnimationFrame","onMouseMove","e","clientX","clientY","onResize","addEventListener","removeEventListener","useGlobalMouseMove","Error"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,EAAuCC,QAAvC,QAAuD,OAAvD;;AAEA,MAAMC,wBAAwB,gBAAGJ,KAAK,CAACK,aAAN,CAAoBC,SAApB,CAAjC;AAEA,OAAO,MAAMC,uBAAuB,GAAG,QAAkB;AAAA;;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AACvD,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCP,QAAQ,CAAC,CAC7C;AACA,GAF6C,EAG7C;AACA,GAJ6C,CAAD,CAA9C;AAOAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIS,aAAa,GAAG,CAApB;AACA,QAAIC,aAAa,GAAG,CAApB;AACA,QAAIC,eAAe,GAAGC,MAAM,CAACC,UAAP,IAAqB,CAA3C;AACA,QAAIC,gBAAgB,GAAGF,MAAM,CAACG,WAAP,IAAsB,CAA7C;AACA,QAAIC,UAAU,GAAGP,aAAjB;AACA,QAAIQ,UAAU,GAAGP,aAAjB;AACA,QAAIQ,YAAY,GAAGP,eAAnB;AACA,QAAIQ,aAAa,GAAGL,gBAApB;;AAEA,UAAMM,MAAM,GAAG,MAAM;AACnB;AACA,UACEJ,UAAU,KAAKP,aAAf,IACAQ,UAAU,KAAKP,aADf,IAEAQ,YAAY,KAAKP,eAFjB,IAGAQ,aAAa,KAAKL,gBAJpB,EAKE;AACAN,QAAAA,cAAc,CAAC,CACb;AACA,UAAEG,eAAe,GAAG,GAAlB,GAAwBF,aAA1B,KAA4CE,eAAe,GAAG,GAA9D,CAFa,EAGb;AACA,SAACG,gBAAgB,GAAG,GAAnB,GAAyBJ,aAA1B,KAA4CI,gBAAgB,GAAG,GAA/D,CAJa,CAAD,CAAd;AAMD;;AAEDE,MAAAA,UAAU,GAAGP,aAAb;AACAQ,MAAAA,UAAU,GAAGP,aAAb;AACAQ,MAAAA,YAAY,GAAGP,eAAf;AACAQ,MAAAA,aAAa,GAAGL,gBAAhB;AACAF,MAAAA,MAAM,CAACS,qBAAP,CAA6BD,MAA7B;AACD,KArBD;;AAsBAA,IAAAA,MAAM;;AAEN,UAAME,WAAW,GAAIC,CAAD,IAAO;AACzBd,MAAAA,aAAa,GAAGc,CAAC,CAACC,OAAlB;AACAd,MAAAA,aAAa,GAAGa,CAAC,CAACE,OAAlB;AACD,KAHD;;AAKA,UAAMC,QAAQ,GAAIH,CAAD,IAAO;AACtBT,MAAAA,gBAAgB,GAAGF,MAAM,CAACG,WAAP,IAAsB,CAAzC;AACAJ,MAAAA,eAAe,GAAGC,MAAM,CAACC,UAAP,IAAqB,CAAvC;AACD,KAHD;;AAKAD,IAAAA,MAAM,CAACe,gBAAP,CAAwB,WAAxB,EAAqCL,WAArC;AACAV,IAAAA,MAAM,CAACe,gBAAP,CAAwB,QAAxB,EAAkCD,QAAlC;AACA,WAAO,MAAM;AACXd,MAAAA,MAAM,CAACgB,mBAAP,CAA2B,WAA3B,EAAwCN,WAAxC;AACAV,MAAAA,MAAM,CAACgB,mBAAP,CAA2B,QAA3B,EAAqCF,QAArC;AACD,KAHD;AAID,GAlDQ,EAkDN,CAAClB,cAAD,CAlDM,CAAT;AAoDA,sBAAO,QAAC,wBAAD,CAA0B,QAA1B;AAAmC,IAAA,KAAK,EAAED,WAA1C;AAAA,cAAwDD;AAAxD;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CA7DM;;GAAMD,uB;;KAAAA,uB;AA+Db,OAAO,MAAMwB,kBAAkB,GAAG,MAAM;AAAA;;AACtC,QAAMtB,WAAW,GAAGR,UAAU,CAACG,wBAAD,CAA9B;AAEA,MAAIK,WAAW,KAAKH,SAApB,EAA+B,MAAM,IAAI0B,KAAJ,CAAU,kEAAV,CAAN;AAE/B,SAAOvB,WAAP;AACD,CANM;;IAAMsB,kB","sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\n\nconst GlobalMouseCoordsContext = React.createContext(undefined);\n\nexport const GlobalMouseMoveProvider = ({ children }) => {\n  const [mouseCoords, setMouseCoords] = useState([\n    // x\n    0,\n    // y\n    0,\n  ]);\n\n  useEffect(() => {\n    let currentMouseX = 0;\n    let currentMouseY = 0;\n    let currentWinWidth = window.innerWidth || 0;\n    let currentWinHeight = window.innerHeight || 0;\n    let prevMouseX = currentMouseX;\n    let prevMouseY = currentMouseY;\n    let prevWinWidth = currentWinWidth;\n    let prevWinHeight = currentWinHeight;\n\n    const onTick = () => {\n      // prettier-ignore\n      if (\n        prevMouseX !== currentMouseX ||\n        prevMouseY !== currentMouseY ||\n        prevWinWidth !== currentWinWidth ||\n        prevWinHeight !== currentWinHeight\n      ) {\n        setMouseCoords([\n          // horizontal distance from center of screen\n          -(currentWinWidth * 0.5 - currentMouseX) / (currentWinWidth * 0.5),\n          // vertical distance from center of screen\n          (currentWinHeight * 0.5 - currentMouseY) / (currentWinHeight * 0.5),\n        ]);\n      }\n\n      prevMouseX = currentMouseX;\n      prevMouseY = currentMouseY;\n      prevWinWidth = currentWinWidth;\n      prevWinHeight = currentWinHeight;\n      window.requestAnimationFrame(onTick);\n    };\n    onTick();\n\n    const onMouseMove = (e) => {\n      currentMouseX = e.clientX;\n      currentMouseY = e.clientY;\n    };\n\n    const onResize = (e) => {\n      currentWinHeight = window.innerHeight || 0;\n      currentWinWidth = window.innerWidth || 0;\n    };\n\n    window.addEventListener('mousemove', onMouseMove);\n    window.addEventListener('resize', onResize);\n    return () => {\n      window.removeEventListener('mousemove', onMouseMove);\n      window.removeEventListener('resize', onResize);\n    };\n  }, [setMouseCoords]);\n\n  return <GlobalMouseCoordsContext.Provider value={mouseCoords}>{children}</GlobalMouseCoordsContext.Provider>;\n};\n\nexport const useGlobalMouseMove = () => {\n  const mouseCoords = useContext(GlobalMouseCoordsContext);\n\n  if (mouseCoords === undefined) throw new Error('useGlobalMouseMove must be used inside a GlobalMouseMoveProvider');\n\n  return mouseCoords;\n};\n"]},"metadata":{},"sourceType":"module"}