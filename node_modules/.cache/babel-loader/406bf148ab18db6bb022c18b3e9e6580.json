{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useRef } from 'react';\nexport const useOnScroll = function () {\n  _s();\n\n  let onScroll = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function () {\n    let scrollY = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    let winHeight = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  };\n\n  // use a ref to avoid an infinite loop when passing `onScroll` to useEffect dependency array\n  const _onScroll = useRef(onScroll);\n\n  _onScroll.current = onScroll;\n  useEffect(() => {\n    let currentScrollY = window.pageYOffset || 0;\n    let currentWinHeight = window.innerHeight || 0;\n    let prevScrollY = currentScrollY;\n    let animationId = null;\n\n    const onTick = () => {\n      if (currentScrollY !== prevScrollY) {\n        _onScroll.current(currentScrollY, currentWinHeight);\n      }\n\n      prevScrollY = currentScrollY;\n      animationId = window.requestAnimationFrame(onTick);\n    };\n\n    onTick();\n\n    const onScroll = e => {\n      currentScrollY = window.pageYOffset || 0;\n    };\n\n    const onResize = e => {\n      currentWinHeight = window.innerHeight || 0;\n    };\n\n    window.addEventListener('resize', onResize);\n    document.addEventListener('scroll', onScroll);\n    return () => {\n      window.removeEventListener('resize', onResize);\n      document.removeEventListener('scroll', onScroll);\n      cancelAnimationFrame(animationId);\n    };\n  }, [_onScroll]);\n};\n\n_s(useOnScroll, \"9MbwR4EqsG+g/Iv6QTCNAABXIo4=\");","map":{"version":3,"sources":["/home/wilson/projetosParticular/yt-react-parallax/src/hooks/useOnScroll.js"],"names":["useEffect","useRef","useOnScroll","onScroll","scrollY","winHeight","_onScroll","current","currentScrollY","window","pageYOffset","currentWinHeight","innerHeight","prevScrollY","animationId","onTick","requestAnimationFrame","e","onResize","addEventListener","document","removeEventListener","cancelAnimationFrame"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,MAApB,QAAkC,OAAlC;AAEA,OAAO,MAAMC,WAAW,GAAG,YAAmD;AAAA;;AAAA,MAAlDC,QAAkD,uEAAvC,YAAgC;AAAA,QAA/BC,OAA+B,uEAArB,CAAqB;AAAA,QAAlBC,SAAkB,uEAAN,CAAM;AAAE,GAAK;;AAC5E;AACA,QAAMC,SAAS,GAAGL,MAAM,CAACE,QAAD,CAAxB;;AACAG,EAAAA,SAAS,CAACC,OAAV,GAAoBJ,QAApB;AAEAH,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIQ,cAAc,GAAGC,MAAM,CAACC,WAAP,IAAsB,CAA3C;AACA,QAAIC,gBAAgB,GAAGF,MAAM,CAACG,WAAP,IAAsB,CAA7C;AACA,QAAIC,WAAW,GAAGL,cAAlB;AACA,QAAIM,WAAW,GAAG,IAAlB;;AAEA,UAAMC,MAAM,GAAG,MAAM;AACnB,UAAIP,cAAc,KAAKK,WAAvB,EAAoC;AAClCP,QAAAA,SAAS,CAACC,OAAV,CAAkBC,cAAlB,EAAkCG,gBAAlC;AACD;;AAEDE,MAAAA,WAAW,GAAGL,cAAd;AACAM,MAAAA,WAAW,GAAGL,MAAM,CAACO,qBAAP,CAA6BD,MAA7B,CAAd;AACD,KAPD;;AASAA,IAAAA,MAAM;;AAEN,UAAMZ,QAAQ,GAAIc,CAAD,IAAO;AACtBT,MAAAA,cAAc,GAAGC,MAAM,CAACC,WAAP,IAAsB,CAAvC;AACD,KAFD;;AAIA,UAAMQ,QAAQ,GAAID,CAAD,IAAO;AACtBN,MAAAA,gBAAgB,GAAGF,MAAM,CAACG,WAAP,IAAsB,CAAzC;AACD,KAFD;;AAIAH,IAAAA,MAAM,CAACU,gBAAP,CAAwB,QAAxB,EAAkCD,QAAlC;AACAE,IAAAA,QAAQ,CAACD,gBAAT,CAA0B,QAA1B,EAAoChB,QAApC;AACA,WAAO,MAAM;AACXM,MAAAA,MAAM,CAACY,mBAAP,CAA2B,QAA3B,EAAqCH,QAArC;AACAE,MAAAA,QAAQ,CAACC,mBAAT,CAA6B,QAA7B,EAAuClB,QAAvC;AACAmB,MAAAA,oBAAoB,CAACR,WAAD,CAApB;AACD,KAJD;AAKD,GAhCQ,EAgCN,CAACR,SAAD,CAhCM,CAAT;AAiCD,CAtCM;;GAAMJ,W","sourcesContent":["import { useEffect, useRef } from 'react';\n\nexport const useOnScroll = (onScroll = (scrollY = 0, winHeight = 0) => {}) => {\n  // use a ref to avoid an infinite loop when passing `onScroll` to useEffect dependency array\n  const _onScroll = useRef(onScroll);\n  _onScroll.current = onScroll;\n\n  useEffect(() => {\n    let currentScrollY = window.pageYOffset || 0;\n    let currentWinHeight = window.innerHeight || 0;\n    let prevScrollY = currentScrollY;\n    let animationId = null;\n\n    const onTick = () => {\n      if (currentScrollY !== prevScrollY) {\n        _onScroll.current(currentScrollY, currentWinHeight);\n      }\n\n      prevScrollY = currentScrollY;\n      animationId = window.requestAnimationFrame(onTick);\n    };\n\n    onTick();\n\n    const onScroll = (e) => {\n      currentScrollY = window.pageYOffset || 0;\n    };\n\n    const onResize = (e) => {\n      currentWinHeight = window.innerHeight || 0;\n    };\n\n    window.addEventListener('resize', onResize);\n    document.addEventListener('scroll', onScroll);\n    return () => {\n      window.removeEventListener('resize', onResize);\n      document.removeEventListener('scroll', onScroll);\n      cancelAnimationFrame(animationId);\n    };\n  }, [_onScroll]);\n};\n"]},"metadata":{},"sourceType":"module"}