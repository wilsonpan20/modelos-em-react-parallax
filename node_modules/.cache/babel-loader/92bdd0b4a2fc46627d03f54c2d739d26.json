{"ast":null,"code":"var _jsxFileName = \"/home/wilson/projetosParticular/yt-react-parallax/src/components/core/Image.js\",\n    _s = $RefreshSig$();\n\nimport { useRef, useState } from 'react'; // import { useRect } from '../hooks/useRect';\n\nimport { useOnScroll } from '../../hooks/useOnScroll';\nimport './Image.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Image = _ref => {\n  _s();\n\n  let {\n    src = '',\n    alt = '',\n    height,\n    children,\n    fixed = false,\n    speed = 1,\n    clamp = false,\n    debug = false\n  } = _ref;\n  const box = useRef(null);\n  const img = useRef(null);\n  const [ΔY, setΔY] = useState(0); // const [boxInitialized, boxRect] = useRect(box);\n  // const [imgInitialized, imgRect] = useRect(img);\n\n  useOnScroll((scrollY, winHeight) => {\n    if (fixed) return;\n    if (!box.current) return;\n    if (!img.current) return; // if (!boxInitialized.current || !box.current || !boxRect.current) return;\n    // if (!imgInitialized.current || !img.current || !imgRect.current) return;\n\n    const boxRect = box.current.getBoundingClientRect();\n    const winBottom = scrollY + winHeight;\n    const boxTop = boxRect.top + scrollY;\n    const boxBottom = boxRect.bottom + scrollY;\n    const boxHeight = boxRect.height;\n    const pct = (clampVal(winBottom, boxTop, boxBottom + winHeight) - boxTop) / (boxHeight + winHeight);\n    const imgHeight = img.current.offsetHeight; // const imgTop = img.current.getBoundingClientRect().y;\n    // const imgHeight = img.current.innerHeight;\n    // const imgBottom = imgTop + imgHeight;\n\n    if (imgHeight < boxHeight) {\n      console.warn(`parallax effect doesn't work if image is smaller than the bounding box. imgHeight=${imgHeight} boxHeight=${boxHeight}`);\n      return;\n    } // calculate the distance that the image needs to traverse\n    // speed: 2  >> start: -diff*2 end: diff\n    // speed: 1  >> start: -diff   end: 0\n    // speed: 0  >> start: -diff/2 end: -diff/2   <-- image is centered\n    // speed: -1 >> start: 0       end: -diff\n    // speed: -2 >> start: diff    end: -diff*2\n\n\n    const diff = imgHeight - boxHeight;\n    const deltaY = // starting offset\n    (0 - diff - diff * speed) * 0.5 + // distance travelled to reach end\n    diff * pct * speed;\n\n    if (clamp) {\n      setΔY(clampVal(deltaY, -diff, 0));\n    } else {\n      setΔY(deltaY);\n    } // const start = (-diff - diff * speed) / 2;\n    // const distance = diff * pct * speed;\n    // if (clamp) {\n    //   setΔY(clampVal(start + distance, -diff, 0));\n    // } else {\n    //   setΔY(start + distance);\n    // }\n    // prettier-ignore\n    // setΔY(speed > 0\n    //   ? clamp(-diff * speed + diff * pct * speed, -diff, 0)\n    //   : clamp(diff * pct * speed, -diff, 0)\n    // );\n    // img.current.style.transform = `translate(0, ${ΔY}px)`;\n    // prettier-ignore\n\n\n    if (debug) console.log({\n      pct,\n      ΔY // imgHeight,\n      // boxHeight,\n      // winBottom,\n      // height,\n      // boxTop,\n      // boxBottom,\n      // imgTop,\n      // imgBottom,\n      // 'clamp()': clamp(winBottom, boxTop, boxBottom),\n\n    });\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: box,\n    className: \"image-box\",\n    style: {\n      height: height || undefined\n    },\n    children: [fixed ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"image-bg dark-overlay\",\n      style: {\n        backgroundImage: `url(${src})`,\n        height: height || undefined\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"img\", {\n      ref: img,\n      className: \"image-behind\",\n      src: src,\n      alt: alt,\n      style: {\n        transform: `translate(0, ${ΔY}px)`\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }, this), Boolean(children) && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"image-content\",\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 29\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Image, \"sTArkIjPvmV27LFgN+qPeHV4cRE=\", false, function () {\n  return [useOnScroll];\n});\n\n_c = Image;\n\nconst clampVal = function () {\n  let num = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  let min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  let max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  return Math.max(min, Math.min(num, max));\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"Image\");","map":{"version":3,"sources":["/home/wilson/projetosParticular/yt-react-parallax/src/components/core/Image.js"],"names":["useRef","useState","useOnScroll","Image","src","alt","height","children","fixed","speed","clamp","debug","box","img","ΔY","setΔY","scrollY","winHeight","current","boxRect","getBoundingClientRect","winBottom","boxTop","top","boxBottom","bottom","boxHeight","pct","clampVal","imgHeight","offsetHeight","console","warn","diff","deltaY","log","undefined","backgroundImage","transform","Boolean","num","min","max","Math"],"mappings":"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","sourcesContent":["import { useRef, useState } from 'react';\n\n// import { useRect } from '../hooks/useRect';\nimport { useOnScroll } from '../../hooks/useOnScroll';\n\nimport './Image.scss';\n\nexport const Image = ({\n  src = '',\n  alt = '',\n  height,\n  children,\n  fixed = false,\n  speed = 1,\n  clamp = false,\n  debug = false,\n}) => {\n  const box = useRef(null);\n  const img = useRef(null);\n  const [ΔY, setΔY] = useState(0);\n\n  // const [boxInitialized, boxRect] = useRect(box);\n  // const [imgInitialized, imgRect] = useRect(img);\n\n  useOnScroll((scrollY, winHeight) => {\n    if (fixed) return;\n    if (!box.current) return;\n    if (!img.current) return;\n    // if (!boxInitialized.current || !box.current || !boxRect.current) return;\n    // if (!imgInitialized.current || !img.current || !imgRect.current) return;\n\n    const boxRect = box.current.getBoundingClientRect();\n\n    const winBottom = scrollY + winHeight;\n    const boxTop = boxRect.top + scrollY;\n    const boxBottom = boxRect.bottom + scrollY;\n    const boxHeight = boxRect.height;\n    const pct = (clampVal(winBottom, boxTop, boxBottom + winHeight) - boxTop) / (boxHeight + winHeight);\n\n    const imgHeight = img.current.offsetHeight;\n    // const imgTop = img.current.getBoundingClientRect().y;\n    // const imgHeight = img.current.innerHeight;\n    // const imgBottom = imgTop + imgHeight;\n\n    if (imgHeight < boxHeight) {\n      console.warn(\n        `parallax effect doesn't work if image is smaller than the bounding box. imgHeight=${imgHeight} boxHeight=${boxHeight}`,\n      );\n      return;\n    }\n\n    // calculate the distance that the image needs to traverse\n    // speed: 2  >> start: -diff*2 end: diff\n    // speed: 1  >> start: -diff   end: 0\n    // speed: 0  >> start: -diff/2 end: -diff/2   <-- image is centered\n    // speed: -1 >> start: 0       end: -diff\n    // speed: -2 >> start: diff    end: -diff*2\n    const diff = imgHeight - boxHeight;\n    const deltaY =\n      // starting offset\n      (0 - diff - diff * speed) * 0.5 +\n      // distance travelled to reach end\n      diff * pct * speed;\n\n    if (clamp) {\n      setΔY(clampVal(deltaY, -diff, 0));\n    } else {\n      setΔY(deltaY);\n    }\n\n    // const start = (-diff - diff * speed) / 2;\n    // const distance = diff * pct * speed;\n\n    // if (clamp) {\n    //   setΔY(clampVal(start + distance, -diff, 0));\n    // } else {\n    //   setΔY(start + distance);\n    // }\n    // prettier-ignore\n    // setΔY(speed > 0\n    //   ? clamp(-diff * speed + diff * pct * speed, -diff, 0)\n    //   : clamp(diff * pct * speed, -diff, 0)\n    // );\n\n    // img.current.style.transform = `translate(0, ${ΔY}px)`;\n\n    // prettier-ignore\n    if (debug) console.log({\n      pct,\n      ΔY,\n      // imgHeight,\n      // boxHeight,\n      // winBottom,\n      // height,\n      // boxTop,\n      // boxBottom,\n      // imgTop,\n      // imgBottom,\n      // 'clamp()': clamp(winBottom, boxTop, boxBottom),\n    });\n  });\n\n  return (\n    <div ref={box} className=\"image-box\" style={{ height: height || undefined }}>\n      {fixed ? (\n        <div\n          className=\"image-bg dark-overlay\"\n          style={{ backgroundImage: `url(${src})`, height: height || undefined }}\n        />\n      ) : (\n        <img\n          ref={img}\n          className=\"image-behind\"\n          src={src}\n          alt={alt}\n          style={{\n            transform: `translate(0, ${ΔY}px)`,\n          }}\n        />\n      )}\n      {Boolean(children) && <div className=\"image-content\">{children}</div>}\n    </div>\n  );\n};\n\nconst clampVal = (num = 0, min = 0, max = 0) => {\n  return Math.max(min, Math.min(num, max));\n};\n"]},"metadata":{},"sourceType":"module"}